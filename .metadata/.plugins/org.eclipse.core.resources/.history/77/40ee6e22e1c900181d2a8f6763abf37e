package com.scripteasy.resources;

import java.net.URI;
import java.util.List;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.scripteasy.DTO.SchemaNewDTO;
import com.scripteasy.DTO.TableDTO;
import com.scripteasy.domain.SchemaSE;
import com.scripteasy.domain.TableSE;
import com.scripteasy.services.SchemaService;
import com.scripteasy.services.TableService;

@RestController
@RequestMapping(value = "/schemas")
public class SchemaResource {

	@Autowired
	private SchemaService service;
	
	@Autowired
	private TableService tableService;

	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public ResponseEntity<SchemaSE> find(@PathVariable Integer id) {

		SchemaSE obj = service.find(id);

		return ResponseEntity.ok().body(obj);

	}
	
	@RequestMapping(value="/{schemaId}/tables", method = RequestMethod.GET)
	public ResponseEntity<List<TableDTO>> findTables(@PathVariable Integer schemaId) {
 		List<TableSE> list = tableService.findBySchema(schemaId);
		List<TableDTO> listDto = list.stream().map(obj -> new TableDTO(obj)).collect(Collectors.toList());
 		return ResponseEntity.ok().body(listDto);
 	}
	
	@RequestMapping(value = "/{schemaId}/tables/page", method = RequestMethod.GET)
	public ResponseEntity<Page<TableDTO>> findSchemaPage(
			@PathVariable Integer schemaId,
			@RequestParam(value="page", defaultValue ="0") Integer page,
			@RequestParam(value="linesPerPage", defaultValue ="24") Integer linesPerPage,
			@RequestParam(value="orderBy", defaultValue ="name") String orderBy,
			@RequestParam(value="direction", defaultValue ="ASC") String direction
			) {
 		Page<TableSE> list = tableService.findPage(schemaId, page, linesPerPage, orderBy, direction);
		Page<TableDTO> listDto = list.map(obj -> new TableDTO(obj));
 		return ResponseEntity.ok().body(listDto);
  	}
	
	@RequestMapping(method = RequestMethod.POST)
	public ResponseEntity<Void> insert(@Valid @RequestBody SchemaNewDTO objDto) {
		System.out.println(objDto.getBase().getId());
		SchemaSE obj = service.fromDTO(objDto);
		obj = service.insert(obj);
		URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(obj.getId()).toUri();
		return ResponseEntity.created(uri).build();

	}


}
