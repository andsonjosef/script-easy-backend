package com.scripteasy.services;

import java.util.Optional;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Service;

import com.scripteasy.DTO.SchemaDTO;
import com.scripteasy.DTO.SchemaNewDTO;
import com.scripteasy.domain.SchemaSE;
import com.scripteasy.domain.UserSE;
import com.scripteasy.domain.enums.Profile;
import com.scripteasy.repositories.SchemaRepository;
import com.scripteasy.security.UserSS;
import com.scripteasy.services.excpetion.AuthorizationException;
import com.scripteasy.services.excpetion.DataIntegrityException;
import com.scripteasy.services.excpetion.ObjectNotFoundException;



@Service
public class SchemaService {


	@Autowired
	private SchemaRepository repo;


	@Autowired
	UserService userService;

	public SchemaSE find(Integer id) {

		Optional<SchemaSE> obj = repo.findById(id);
		
		UserSS user = UserSService.authenticated();
		if (user == null || !user.hasRole(Profile.ADMIN) && !obj.get().getUser().getId().equals(user.getId())) {
			throw new AuthorizationException("Acess denied");
		}
		return obj.orElseThrow(
				() -> new ObjectNotFoundException("Obect not found! Id: " + id + ", Type: " + SchemaSE.class.getName()));
	}

	@Transactional
	public SchemaSE insert(SchemaSE obj) {
		obj.setId(null);
		obj.setUser(userService.find(obj.getUser().getId()));
		obj = repo.save(obj);

		return obj;
	}
	

	public SchemaSE update(SchemaSE obj) {
		
		Optional<SchemaSE> optimalobj = repo.findById(obj.getId());
		UserSS user = UserSService.authenticated();
		if (user == null || !user.hasRole(Profile.ADMIN) && !optimalobj.get().getUser().getId().equals(user.getId())) {
			throw new AuthorizationException("Acess denied");
		}

		SchemaSE newObj = find(obj.getId());
		updateData(newObj, obj);
		return repo.save(newObj);
	}

	public void delete(Integer id) {
		Optional<SchemaSE> optimalobj = repo.findById(id);
		UserSS user = UserSService.authenticated();
		
		if (user == null || !user.hasRole(Profile.ADMIN) && !optimalobj.get().getUser().getId().equals(user.getId())) {
			throw new AuthorizationException("Acess denied");
		}
		
		find(id);
		try {
			repo.deleteById(id);
		} catch (DataIntegrityViolationException e) {
			throw new DataIntegrityException("Can not delete because there are related orders");
		}
	}

	public Page<SchemaSE> findPage(Integer page, Integer linesPerPage, String orderBy, String direction) {
		UserSS user = UserSService.authenticated();
		if (user == null) {
			throw new AuthorizationException("Acess denied");
		}
		PageRequest pageRequest = PageRequest.of(page, linesPerPage, Direction.valueOf(direction), orderBy);
		UserSE userse = userService.find(user.getId());
		return repo.findByUser(userse, pageRequest);
	}
	
	public SchemaSE fromDTO(SchemaDTO objDto) {
		return new SchemaSE(objDto.getId(), objDto.getName(),  null);

	}

	public SchemaSE fromDTO(SchemaNewDTO objDto) {
		
	
		SchemaSE Schema = new SchemaSE(null, objDto.getName(), objDto.getDatabase());
		return Schema;

	}
	
	private void updateData(SchemaSE newObj, SchemaSE obj) {
		newObj.setName(obj.getName());

	}
}
