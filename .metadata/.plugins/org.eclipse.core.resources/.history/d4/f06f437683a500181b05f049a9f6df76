package com.scripteasy.services;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.scripteasy.domain.User;
import com.scripteasy.repositories.UserRepository;


@Service
public class DBService {

	@Autowired
	private BCryptPasswordEncoder pe;

	private UserRepository clientRepository;
	@Autowired


	public void IstantiateTestDataBase() throws ParseException {
		

		User cli1 = new User (null, "Maria Silva", "maria@gmail.com",  pe.encode("123"));
		cli1.getPhones().addAll(Arrays.asList("27736323", "93838393"));
		
		User cli2 = new User(null, "Ana Costa", "ana@gmail.com", pe.encode("123"));
		cli1.getPhones().addAll(Arrays.asList("99336323", "93838258"));
		cli2.addProfile(Profile.ADMIN);

		Address a1 = new Address(null, "Rua Flores", "300", "Apto 303", "Jardin", "38220834", cli1, c1);
		Address a2 = new Address(null, "Avenida Matos", "105", "Sala 800", "Centro", "38777012", cli1, c2);
		Address a3 = new Address(null, "Avenida Floriano", "2106", null, "Centro", "58455654", cli2, c2);


		cli1.getAdresses().addAll(Arrays.asList(a1, a2));
		cli2.getAdresses().addAll(Arrays.asList(a3));


		clientRepository.saveAll(Arrays.asList(cli1, cli2));
		addressRepository.saveAll(Arrays.asList(a1, a2, a3));

		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");
		Order ord1 = new Order(null, sdf.parse("30/09/2017 10:32"), cli1, a1);
		Order ord2 = new Order(null, sdf.parse("10/10/2017 19:35"), cli1, a2);

		Payment pay1 = new PaymentCreditCard(null, StatusPayment.PAYED, ord1, 6);
		ord1.setPayment(pay1);

		Payment pay2 = new PaymentBankTransfer(null, StatusPayment.PENDING, ord2, sdf.parse("20/10/2017 00:00"), null);
		ord2.setPayment(pay2);

		cli1.getOrders().addAll(Arrays.asList(ord1, ord2));

		orderRepository.saveAll(Arrays.asList(ord1, ord2));
		paymentRepository.saveAll(Arrays.asList(pay1, pay2));

		ItemOrder io1 = new ItemOrder(ord1, p1, 0.00, 1, 2000.00);
		ItemOrder io2 = new ItemOrder(ord1, p3, 0.00, 2, 80.00);
		ItemOrder io3 = new ItemOrder(ord2, p2, 100.00, 1, 800.00);

		ord1.getItems().addAll(Arrays.asList(io1, io2));
		ord2.getItems().addAll(Arrays.asList(io3));

		p1.getItems().addAll(Arrays.asList(io1));
		p2.getItems().addAll(Arrays.asList(io3));
		p3.getItems().addAll(Arrays.asList(io2));

		itemOrderRepository.saveAll(Arrays.asList(io1, io2, io3));
	}

}
