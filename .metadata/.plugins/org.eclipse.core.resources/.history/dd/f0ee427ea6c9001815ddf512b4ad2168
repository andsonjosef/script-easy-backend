package com.scripteasy.services;

import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Service;

import com.scripteasy.DTO.SchemaDTO;
import com.scripteasy.domain.DataBaseSE;
import com.scripteasy.domain.SchemaSE;
import com.scripteasy.repositories.SchemaRepository;
import com.scripteasy.security.UserSS;
import com.scripteasy.services.excpetion.AuthorizationException;
import com.scripteasy.services.excpetion.DataIntegrityException;
import com.scripteasy.services.excpetion.ObjectNotFoundException;



@Service
public class SchemaService {


	@Autowired
	private SchemaRepository repo;
	

	@Autowired
	UserService userService;

	@Autowired
	private DataBaseService databaseService;

	public SchemaSE find(Integer id) {
		UserSS user = UserSService.authenticated();
		if (user == null ) {

			throw new AuthorizationException("Acess denied");
		}
		Optional<SchemaSE> obj = repo.findById(id);
		return obj.orElseThrow(
				() -> new ObjectNotFoundException("Obect not found! Id: " + id + ", Type: " + SchemaSE.class.getName()));
	}
	
	public List<SchemaSE> findByDataBase(Integer databaseId) {
		UserSS user = UserSService.authenticated();
		if (user == null ) {

			throw new AuthorizationException("Acess denied");
		}
		return repo.findSchemas(databaseId, user.getId());
	}
	
	public SchemaSE fromDTO(SchemaDTO objDto) {
		return new SchemaSE(objDto.getId(), objDto.getName(), null);

	}

	@Transactional
	public SchemaSE insert(SchemaSE obj) {
		SchemaSE sc = new SchemaSE();
		DataBaseSE db = new DataBaseSE();
		db = databaseService.find(obj.getId());
		sc = repo.findByNameContainingAndDatabaseIn(obj.getName(), db);
		if(sc != null) {
			
			throw new DataIntegrityException("Existing DataBase!");
			
		}else {
		
		} 
		
		obj.setId(null);
		obj.setDatabase(db);
		obj = repo.save(obj);

		return obj;
	}

	

	
	public Page<SchemaSE> findPage(Integer id, Integer page, Integer linesPerPage, String orderBy, String direction) {
		
		PageRequest pageRequest = PageRequest.of(page, linesPerPage, Direction.valueOf(direction), orderBy);
		DataBaseSE base = databaseService.find(id);
		return repo.findByDatabase(base, pageRequest);
	}
	

	
}
